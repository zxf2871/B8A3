// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.1.3-2'
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-alpha8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//task
//1 定义task
//这里的"<<"表示向helloWorld中加入执行代
task helloWorld << {
    println "hello world!"
}

task hello1 << {
    println 'hello1'
}

task hello2 {
    doLast {
        println 'hello2'
    }
}

task hello3 {
    doFirst {
        println 'hello3'
    }
}

//2 定义类型: 复制文件  从xml到destination

task copyFile(type: Copy) {
    from 'xml'
    into 'destination'
}

//通过TaskContainer的create()方法创建Task
//注意是tasks 加s
tasks.create(name: 'hello4') << {
    println 'hello4'
}

//3 生命依赖  两种方式:
//第一种
task hello5(dependsOn: hello4) << {
    println 'hello5'
}
//第二种
task hello6 << {
    println 'hello6'
}
hello6.dependsOn hello5

//我们可以在定义Task的时候对 Property 进行配置：  description, logger
task hello7 << {
    description = "this is hello7"
    println description
}

task hello8(dependsOn: hello7) << {
    println description
}
hello8.configure {
    description = "1  this is hello8"
}
//我们还可以通过闭包的方式来配置一个已有的Task：
hello8 {
    description = "this is hello8"
}

//三种相同功能的设置
task showDescription1 << {
    description = 'this is task showDescription'
    println description
}

task showDescription2 << {
    println description
}
showDescription2.description = 'this is task showDescription'


task showDescription3 << {
    println description
}

showDescription3 {
    description = 'this is task showDescription'
}

class GroovyBeanExample {
    private String name;
}

task hello9 << {
    def bean = new GroovyBeanExample()
    bean.name = 'this is name'
    println bean.name
}


class Child {
    private String name
}

class Parent {
    Child child = new Child()

    void configChild(Closure c) {
        c.delegate = child
        c.setResolveStrategy Closure.DELEGATE_FIRST
        c()
    }
}

task hello10 << {
    def parent = new Parent()
    parent.configChild {
        name = "child name"
    }

    println parent.child.name

}

//修改前
task combineFileContentNonIncremental {
    def sources = fileTree('sourceDir')
    def destination = file('destination.txt')

    doLast {
        destination.withPrintWriter { writer ->
            sources.each { source ->
                writer.println source.text
            }
        }
    }
}

//修改后
task combineFileContentIncremental {
    def sources = fileTree('sourceDir')
    def destination = file('destination.txt')

    inputs.dir sources
    outputs.file destination

    doLast {
        destination.withPrintWriter { writer ->
            sources.each { source ->
                writer.println source.text
            }
        }
    }
}

//gradle常用的Poperty:
//•project：Project本身
//•name：Project的名字
//•path：Project的绝对路径
//•description：Project的描述信息
//•buildDir：Project构建结果存放目录
//•version：Project的版本号

//设置并打印
version = 'this is the project version'
description = 'this is the project description'
//两种定义方式
ext.property1="this is property1"
ext{
    property2="this is property2"
}

task showProjectProperties << {
    println version
    println project.description
    println description
    //打印description时使用了project因为task和project都有这个属性
    println property1
    println property2
}

//通过命令行参数定义Property
task showCommandLineProperties <<{
    println property3
}

//命令行输入: gradle -P property3="this is property3" showCommandLineProperties
//命令行输入 -D的参数需要加org.gradle.project.: gradle -D org.gradle.project.property3="this is property3" showCommandLineProperties

